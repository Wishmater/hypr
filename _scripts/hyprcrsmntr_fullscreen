#!/usr/bin/env bash

# Default value for internal state
SET_INTERNAL=false

# Parse command line arguments
while [ $# -gt 0 ]; do
  case "$1" in
  --internal)
    SET_INTERNAL=true
    shift
    ;;
  *)
    echo "Error: Invalid argument. Usage: $0 [--internal]"
    exit 1
    ;;
  esac
done

# Get active window info
active_window=$(hyprctl activewindow -j)

# Check if hyprctl command was successful
if [ $? -ne 0 ]; then
  echo "Error: Failed to get active window information"
  exit 1
fi

# Check if window is fullscreen or maximized
is_fullscreen=$(echo "$active_window" | jq '.fullscreen')
# # is_maximized seems to always be null, so not needed
# is_maximized=$(echo "$active_window" | jq '.maximized')

# Check if jq commands were successful
if [ $? -ne 0 ]; then
  echo "Error: Failed to parse window information"
  exit 1
fi

echo "$is_fullscreen"
# if [ "$is_fullscreen" = "1" ] || [ "$is_maximized" = "1" ]; then
if [ "$is_fullscreen" != "0" ]; then
  echo "FORCE CLOSE"

  hyprctl dispatch fullscreenstate 0 0

else

  # Check if window is on special workspace
  is_special=$(echo "$active_window" | jq '.workspace.name | startswith("special")')

  if [ $? -ne 0 ]; then
    echo "Error: Failed to check workspace information"
    exit 1
  fi

  if [ "$is_special" = "true" ]; then
    # Maximize if on special workspace
    if [ "$SET_INTERNAL" = "true" ]; then
      hyprctl dispatch fullscreenstate 1 2
    else
      hyprctl dispatch fullscreenstate 1 0
    fi
  else
    # Fullscreen if not on special workspace
    if [ "$SET_INTERNAL" = "true" ]; then
      hyprctl dispatch fullscreenstate 2 2
    else
      hyprctl dispatch fullscreenstate 2 0
    fi
  fi

fi
